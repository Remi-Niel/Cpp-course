#include <iostream>
#include <mutex>
#include <map>
#include <ostream>
#include <streambuf>
#include <thread>
#include <vector>

using namespace std;

/*
    PassOnStreamBuf
*/
class PassOnStreamBuf: public std::streambuf
{
    std::ostream &d_os;

    public:
        PassOnStreamBuf(std::ostream &os);
        PassOnStreamBuf(PassOnStreamBuf &&tmp) = default;

        int overflow(int ch) override;
};

inline PassOnStreamBuf::PassOnStreamBuf(std::ostream &os)
: 
    d_os(os)
{}

inline int PassOnStreamBuf::overflow(int ch)
{
    d_os.put(ch);
    return ch;
}

/*
    TSosWrap
*/
struct TSosWrap: private PassOnStreamBuf, public std::ostream
{
    TSosWrap(std::ostream &os);
    TSosWrap(TSosWrap const &other) = delete;
    
    TSosWrap &operator=(TSosWrap const &other) = delete;

    private:
        unique_lock<std::recursive_mutex> d_lock;
        static map<ostream*, recursive_mutex> s_mutex;
};

inline TSosWrap::TSosWrap(std::ostream &os)
: 
    PassOnStreamBuf(os),
    std::ostream(this)
{ 
    //If it is the first time this stream is encountered add a mutex for it
    if (s_mutex.find(&os) == s_mutex.end())
        s_mutex[&os];
    
    //Lock the stream
    d_lock = unique_lock<recursive_mutex>(s_mutex[&os]);
}