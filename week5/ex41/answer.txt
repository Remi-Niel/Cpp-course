1. What differences exist between pointer variables and arrays
	?

2. What differences exist between pointer variables and reference variables
	A reference variable cannot change its target. 
	Reference variables cannot point to 0.

3. How element [3][2] is reached (make a clear drawing)

	a. for the variable 'tt(int array[20][30])'
								  			   |3
								  			         |2
		[[1,2,...,30],[1,2,...,30],[1,2,...,30],[1,2,3,...,30], ....,[1,2,...,30]]

	b. for the variable 'tt(int *pointer[20])'

		[pointer0,		
		 pointer1,		
		 pointer2,						|2	
	->3	 pointer3,		-->			[1,2,3,...,30]
		 ...,
		 pointer19		
		 ]


	your drawing should clearly show how the memory accessed by array and pointer is (differently organized)

4. What is meant by 'pointer arithmatic'

	Using arithmatic operations with pointer variables, to either produce new pointers or discover properties like distance in memory between 2 pointers.

5. Explain why accessing an element in an array using only a pointer variable is preferred over using an index expression. By implication: why are repetitions iterating over a series of elements using a pointer-type loop control variable preferred over repetitions in which the loop control variable is, e.g., a size_t type variable.

	It's more direct, using an index variable the program must do the following in every iterations: add index to pointer, then dereference the new pointer. This has to be done every time the element is used in a iteration. Using the pointer variable the element can be directly accessed by dereferencing the pointer variable, the only time pointer variable arithmetic occurs is during the increment.