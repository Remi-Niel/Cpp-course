// flexc++ definition section

/*  There are 3 cases for block comments:
    - basic 1 line block comment, so no blank before or after.
    - blanked block comment, 1 line block comment preceded or followed
        by 1 or more blanks. This comment should be replace by a blank.
    - Multi line block comment, can be preceded or followed by blanks.
        Should be replace by a newline.*/
%x subline comment blankComment multiComment

%%
<comment>"*/"               begin(StartCondition__::INITIAL);
<comment>"*/"[ \t]+         {begin(StartCondition__::INITIAL);
                                return BLANK;}
<comment>.                  //ignore
<comment>\n                 {begin(StartCondition__::multiComment);
                                return ENDL;}

//Blank comments-------------------

<blankComment>.             //ignore
<blankComment>\n            {begin(StartCondition__::multiComment); 
                                return ENDL;}
<blankComment>"*/"         {begin(StartCondition__::INITIAL); 
                                return BLANK;}

<multiComment>.|\n          //ignore
<multiComment>"*/"          begin(StartCondition__::INITIAL); //go back to state initial
         


<subline>./([ \t]+)\n       {
                                begin(StartCondition__::INITIAL);
                                return SUBL;
                            }
<subline>./\n               {
                                begin(StartCondition__::INITIAL);
                                return SUBL;
                            }

<subline>./"//"             {
                            begin(StartCondition__::INITIAL);
                            return SUBL;
                            }
<subline>./"/*"             {
                            begin(StartCondition__::INITIAL);
                            return SUBL;
                            }
//keep possible blank before /*
<subline>./" /*"             {
                            begin(StartCondition__::INITIAL);
                            return SUBL;
                            }
<subline>.          more();         
<subline><<EOF>>            {
                                begin(StartCondition__::INITIAL);
                                return SUBL;
                            }           

//General Rules---------------
"//".*/\n                   //ignore end-of-line comment
"/*"                        begin(StartCondition__::comment); //go to state comment                        

^[ \t]+                                    //ignore initial blanks
[ \t]*[ \t]                                   //ignore trailing blanks

//starts with none blank and ends with none blank
[^ \t\n]                {more(); 
                         begin(StartCondition__::subline);}
\n                                                  return ENDL;
<<EOF>>                                             return DONE;
