// definition section

%x string
%x multiline

%%
// rules section

// special cases, these can contain string literals that should
// not be replaced. We do return them because they need to be copied
// to the output file.
#include.*              return INCLUDE;
"//".*                  return LINE_COMMENT;

// If a string starts, go to miniscanner
\"                      {more(); begin(StartCondition__::string);}

// If string ends, go to multiline scanner, which checks wether the
// string continues on the next line
<string>\"              {begin(StartCondition__::multiline); return STRING_PART;}
<string>.               more();

// if a new string start is found after only whitespace, parse that one too.
<multiline>\"           {more(); begin(StartCondition__::string);}
// no new string means we finalize the current one and go back to normal
parsing
<multiline>[^ \n\t]     {begin(StartCondition__::INITIAL); return STRING_DONE;}

<<EOF>>                 return DONE;
