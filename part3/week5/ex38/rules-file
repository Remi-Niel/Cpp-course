// definition section

%x string
%x multiline

%x rawstring_delim
%x rawstring_inner
%x rawstring_closer


%%
// rules section

// special cases, these can contain string literals that should
// not be replaced. We do return them because they need to be copied
// to the output file.
#include.*              return INCLUDE;
"//".*                  return LINE_COMMENT;

// If a string starts, go to miniscanner
\"                      {more(); begin(StartCondition__::string);}

// If string ends, go to multiline scanner, which checks wether the
// string continues on the next line
<string>\"              {begin(StartCondition__::multiline); return STRING_PART;}
<string>.               more();

// if a new string start is found after only whitespace, parse that one too.
<multiline>\"           {more(); begin(StartCondition__::string);}
// no new string means we finalize the current one and go back to normal
parsing
<multiline>[^ \n\t]     {begin(StartCondition__::INITIAL); return STRING_DONE;}

//Parse start of a raw string, we need to find the delimiter first
R\"                             {d_buffer = ""; d_delimiter = ""; begin(StartCondition__::rawstring_delim);}
//delimiter can be empty, so bracket open means we start parsing the inner string
<rawstring_delim>\(             begin(StartCondition__::rawstring_inner);

// collect the delimiter
<rawstring_delim>.              {d_delimiter += matched()[0];}

// Closing bracket might well be end of the string, but we need to check
// the delimiter, <rawstring_closer> does that.
<rawstring_inner>\)             {begin(StartCondition__::rawstring_closer);}
// collect string contents
<rawstring_inner>.|\n           d_buffer += matched()[0];

// if we encounter a '"' we check wether the delimiter we parsed matches with
// the opening delimiter. If so we collected the string.
// else we got bamboozled and we go back and parse the stuff as normal
<rawstring_closer>\"            {
                                    if (matched() == (d_delimiter + '"'))
                                    {
                                        setMatched(d_buffer);
                                        begin(StartCondition__::INITIAL);
                                        return RAWSTRING;
                                    }
                                    else
                                    {
                                        d_buffer += ')';
                                        redo(matched().size());
                                        begin(StartCondition__::rawstring_inner);
                                    }
                                }
// collecting the close delimiter
<rawstring_closer>.             more();



<<EOF>>                 return DONE;
