%class-name Parser

%filenames parser
%parsefun-source parse.cc

%baseclass-preinclude rulevalue.h
%stype RuleValue

%scanner ../scanner/scanner.h

%token  NUMBER
        IDENT
        END

%right  '='
%left   '+' '-'
%right  uMinus 

// %debug

%%

lines:
    lines line
|
    line
;


line:
    expr '\n'
    {
        display($1);
    }
|
    error '\n'    
    {
        prompt();
    }
|
    '\n'
    {
        prompt();
    }
|
    END '\n'
    {
        done();
    }
;

expr:
    NUMBER
    {
        $$ = value();
    }
|
    ident
    {
        $$ = $1;
    }
|
    '-' expr            %prec uMinus
    {
        $$ = negate($2);
    }
|
    expr '+' expr
    {
        $$ = add($1, $3);
    }    
|
    expr '-' expr
    {
        $$ = sub($1, $3);

    }    
|
    '(' expr ')'
    {
        $$ = $2;
    }
|
    expr '=' expr
    {
        $$ = assign($1, $3);
    }
|
    ident '(' exprList ')'
    {
        if ($1.d_type != RuleValue::FUNCTION)
        {
            std::cout << "Function name not valid";
            d_display = false;
            $$ = $1;
        } 
        else
        {
            $$ = RuleValue((*$1.d_function)($3.d_argList));
        }
    }
;

exprList:
    exprList ',' expr
    {
        if ($3.d_type != RuleValue::VALUE &&
            $3.d_type != RuleValue::VARIABLE)
        {    
            std::cout << "Argument must resolve to a value";
            d_display = false;
        }
        $1.d_argList.push_back($3);
        $$ = $1;
    }
|
    expr
    {
        RuleValue list{};
        list.d_type = RuleValue::LIST;
        list.d_argList.push_back($1);
        $$ = list;
    }
;

ident:
    IDENT
    {
        if (d_constants.find(d_scanner.matched()) != d_constants.end())
            $$ = RuleValue(d_constants[d_scanner.matched()]);
        else if (d_functions.find(d_scanner.matched()) != d_functions.end())
            $$ = RuleValue(d_functions[d_scanner.matched()]);
        else if (d_angle_settings.find(d_scanner.matched()) != d_angle_settings.end())
        {
            d_type = d_angle_settings[d_scanner.matched()];
            $$ = RuleValue();
        }
        else
            $$ = variable();
    }
;
