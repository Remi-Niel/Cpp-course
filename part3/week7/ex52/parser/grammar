%class-name Parser

%filenames parser
%parsefun-source parse.cc

%baseclass-preinclude rulevalue.h
%stype RuleValue

%scanner ../scanner/scanner.h

%token  NUMBER
        IDENT
        END
        RAD
        GRAD
        DEG
        PI
        E

%right  '='
%left   '+' '-'
%right  uMinus EXP LN SIN ASIN COS ACOS TAN ATAN SQRT ABS

// %debug

%%

lines:
    lines line
|
    line
;


line:
    expr '\n'
    {
        display($1);
    }
|
    error '\n'    
    {
        prompt();
    }
|
    '\n'
    {
        prompt();
    }
|
    END '\n'
    {
        done();
    }
|
    RAD '\n'
    {
        setAngleType(RAD);
        prompt();
    }
|
    GRAD '\n'
    {
        setAngleType(GRAD);
        prompt();
    }
|
    DEG '\n'
    {
        setAngleType(DEG);
        prompt();
    }
;

expr:
    NUMBER
    {
        $$ = value();
    }
|
    PI
    {
        $$ = RuleValue(M_PI);
    }
|
    E
    {
        $$ = RuleValue(M_E);
    }
|
    IDENT
    {
        $$ = variable();
    }
|
    '-' expr            %prec uMinus
    {
        $$ = negate($2);
    }
|
    expr '+' expr
    {
        $$ = add($1, $3);
    }    
|
    expr '-' expr
    {
        $$ = sub($1, $3);

    }    
|
    '(' expr ')'
    {
        $$ = $2;
    }
|
    expr '=' expr
    {
        $$ = assign($1, $3);
    }
|
    EXP expr
    {
        $$ = exp($2);
    }
|
    LN expr
    {
        $$ = ln($2);
    }
|
    ABS expr
    {
        $$ = abs($2);
    }
|
    SQRT expr
    {
        $$ = sqrt($2);
    }
|
    SIN expr
    {
        $$ = sin($2);
    }
|
    ASIN expr
    {
        $$ = asin($2);
    }
|
    COS expr
    {
        $$ = cos($2);
    }
|
    ACOS expr
    {
        $$ = acos($2);
    }
|
    TAN expr
    {
        $$ = tan($2);
    }
|
    ATAN expr
    {
        $$ = atan($2);
    }
;

