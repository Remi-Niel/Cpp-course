// Generated by Bisonc++ V6.01.00 on Sat, 23 Mar 2019 01:25:42 +0100

#ifndef Parser_h_included
#define Parser_h_included

// $insert baseclass
#include "parserbase.h"
// $insert scanner.h
#include "../scanner/scanner.h"

#include <vector>
#include <unordered_map>
#include <string>
#include <functional>

#undef Parser
    // CAVEAT: between the baseclass-include directive and the 
    // #undef directive in the previous line references to Parser 
    // are read as ParserBase.
    // If you need to include additional headers in this file 
    // you should do so after these comment-lines.


class Parser: public ParserBase
{

    enum Angle_Type
    {
        RAD,
        DEG,
        GRAD
    };
    std::unordered_map<std::string, double> d_constants;
    std::unordered_map<std::string, std::function<double (std::vector<RuleValue>)>> d_functions;
    std::unordered_map<std::string, Angle_Type> d_angle_settings;

    // $insert scannerobject
    Scanner d_scanner;
        
    std::vector<double> d_value;
    std::unordered_map<std::string, unsigned> d_symtab;

    Angle_Type d_type; 

    bool d_display;
        
    public:
        Parser(bool run);
        int parse();

    private:
        void error(char const *msg);    // called on (syntax) errors
        void error();                   // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc
        void exceptionHandler(std::exception const &exc);

    // support functions for parse():
        void executeAction__(int ruleNr);
        void errorRecovery__();
        void nextCycle__();
        void nextToken__();
        void print__();

    // added functions for the calculator:

        void display(RuleValue &e);
        void done();
        void prompt();

        void setAngleType(Angle_Type type);
        RuleValue &add(RuleValue &lvalue, RuleValue &rvalue);
        RuleValue &assign(RuleValue &lvalue, RuleValue &rvalue);
        double exp(std::vector<RuleValue> args);
        double ln(std::vector<RuleValue> args);
        double sin(std::vector<RuleValue> args);
        double asin(std::vector<RuleValue> args);
        double cos(std::vector<RuleValue> args);
        double acos(std::vector<RuleValue> args);
        double tan(std::vector<RuleValue> args);
        double atan(std::vector<RuleValue> args);
        double sqrt(std::vector<RuleValue> args);
        double abs(std::vector<RuleValue> args);
        RuleValue &negate(RuleValue &e);
        RuleValue &sub(RuleValue &lvalue, RuleValue &rvalue);
        RuleValue value();
        RuleValue variable();

        double valueOf(RuleValue const &e);
};


#endif
