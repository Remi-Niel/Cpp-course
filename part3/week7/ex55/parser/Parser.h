// Generated by Bisonc++ V6.01.03 on Wed, 27 Mar 2019 13:29:39 +0100

#ifndef Parser_h_included
#define Parser_h_included

// $insert baseclass
#include "Parserbase.h"


#undef Parser
    // CAVEAT: between the baseclass-include directive and the 
    // #undef directive in the previous line references to Parser 
    // are read as ParserBase.
    // If you need to include additional headers in this file 
    // you should do so after these comment-lines.
#include "../scanner/scanner.h"


class Parser: public ParserBase
{
    Scanner d_scanner;
    Rules d_rules;

    public:
        Parser() = default;
        int parse();

        void print(STYPE__ const &str) const;
        void print(std::string const &str) const;
        void print_completed() const;

        std::string append(std::string const &line, std::string const &str) const;

        void newrule();
        void set_lhs(std::string const &line);
        void append_rule(std::string const &line);

    private:
        void error();                   // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc
        void exceptionHandler(std::exception const &exc);

    // support functions for parse():
        void executeAction__(int ruleNr);
        void errorRecovery__();
        void nextCycle__();
        void nextToken__();
        void print__();
};


#endif
