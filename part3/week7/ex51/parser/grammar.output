[grammar (info)] Line 108: 
Production Rules:
   (precedences (shown between parentheses) were set by %prec;
    are equal to the precedence of the rules' 1st terminal tokens;
    or (if not shown) are equal to the default (max) precedence)
1: lines ->  lines line
2: lines ->  line
3: lines ('\x0a') ->  '\x0a'
4: line ('\x0a') ->  expr '\x0a'
5: line (errTok__) ->  errTok__ '\x0a'
6: line ('\x0a') ->  '\x0a' '\x0a'
7: expr (NUMBER) ->  NUMBER
8: expr (IDENT) ->  IDENT
9: expr (uMinus) ->  '-' expr
10: expr ('+') ->  expr '+' expr
11: expr ('*') ->  expr '*' expr
12: expr ('-') ->  expr '-' expr
13: expr ('/') ->  expr '/' expr
14: expr ('(') ->  '(' expr
15: expr ('(') ->  expr '('
16: expr (')') ->  expr ')'
17: lines_$ ->  lines


Symbolic Terminal tokens:
       error
       EOF
   257: NUMBER
   258: IDENT
   259: END
   260: uMinus
    43: '+'
    42: '*'
    47: '/'
    45: '-'
    40: '('
    41: ')'
    10: '\x0a'


Grammar States: 

State 0:
17: lines_$ ->  . lines 
  0:   On lines to state 1
  1:   On line to state 2
  2:   On '\x0a' to state 3
  3:   On expr to state 4
  4:   On errTok__ to state 5
  5:   On NUMBER to state 6
  6:   On IDENT to state 7
  7:   On '-' to state 8
  8:   On '(' to state 9


State 1:
17: lines_$ -> lines  . 
1: lines -> lines  . line 
  0:   On line to state 10
  1:   On expr to state 4
  2:   On errTok__ to state 5
  3:   On '\x0a' to state 11
  4:   On NUMBER to state 6
  5:   On IDENT to state 7
  6:   On '-' to state 8
  7:   On '(' to state 9


State 2:
2: lines -> line  . 
  Reduce by 2: lines -> line  . 


State 3:
3: lines -> '\x0a'  . 
6: line -> '\x0a'  . '\x0a' 
  0:   On '\x0a' to state 12
  Reduce by 3: lines -> '\x0a'  . 
Solved SR CONFLICT on '\x0a':
	shift to state 12, removed '\x0a' from LA-set of rule 3)


State 4:
4: line -> expr  . '\x0a' 
10: expr -> expr  . '+' expr 
11: expr -> expr  . '*' expr 
12: expr -> expr  . '-' expr 
13: expr -> expr  . '/' expr 
15: expr -> expr  . '(' 
16: expr -> expr  . ')' 
  0:   On '\x0a' to state 13
  1:   On '+' to state 14
  2:   On '*' to state 15
  3:   On '-' to state 16
  4:   On '/' to state 17
  5:   On '(' to state 18
  6:   On ')' to state 19


State 5:
5: line -> errTok__  . '\x0a' 
  0:   On '\x0a' to state 20


State 6:
7: expr -> NUMBER  . 
  Reduce by 7: expr -> NUMBER  . 


State 7:
8: expr -> IDENT  . 
  Reduce by 8: expr -> IDENT  . 


State 8:
9: expr -> '-'  . expr 
  0:   On expr to state 21
  1:   On NUMBER to state 6
  2:   On IDENT to state 7
  3:   On '-' to state 8
  4:   On '(' to state 9


State 9:
14: expr -> '('  . expr 
  0:   On expr to state 22
  1:   On NUMBER to state 6
  2:   On IDENT to state 7
  3:   On '-' to state 8
  4:   On '(' to state 9


State 10:
1: lines -> lines line  . 
  Reduce by 1: lines -> lines line  . 


State 11:
6: line -> '\x0a'  . '\x0a' 
  0:   On '\x0a' to state 12


State 12:
6: line -> '\x0a' '\x0a'  . 
  Reduce by 6: line -> '\x0a' '\x0a'  . 


State 13:
4: line -> expr '\x0a'  . 
  Reduce by 4: line -> expr '\x0a'  . 


State 14:
10: expr -> expr '+'  . expr 
  0:   On expr to state 23
  1:   On NUMBER to state 6
  2:   On IDENT to state 7
  3:   On '-' to state 8
  4:   On '(' to state 9


State 15:
11: expr -> expr '*'  . expr 
  0:   On expr to state 24
  1:   On NUMBER to state 6
  2:   On IDENT to state 7
  3:   On '-' to state 8
  4:   On '(' to state 9


State 16:
12: expr -> expr '-'  . expr 
  0:   On expr to state 25
  1:   On NUMBER to state 6
  2:   On IDENT to state 7
  3:   On '-' to state 8
  4:   On '(' to state 9


State 17:
13: expr -> expr '/'  . expr 
  0:   On expr to state 26
  1:   On NUMBER to state 6
  2:   On IDENT to state 7
  3:   On '-' to state 8
  4:   On '(' to state 9


State 18:
15: expr -> expr '('  . 
  Reduce by 15: expr -> expr '('  . 


State 19:
16: expr -> expr ')'  . 
  Reduce by 16: expr -> expr ')'  . 


State 20:
5: line -> errTok__ '\x0a'  . 
  Reduce by 5: line -> errTok__ '\x0a'  . 


State 21:
9: expr -> '-' expr  . 
10: expr -> expr  . '+' expr 
11: expr -> expr  . '*' expr 
12: expr -> expr  . '-' expr 
13: expr -> expr  . '/' expr 
15: expr -> expr  . '(' 
16: expr -> expr  . ')' 
  0:   On '+' to state 14
  1:   On '*' to state 15
  2:   On '-' to state 16
  3:   On '/' to state 17
  4:   On '(' to state 18
  5:   On ')' to state 19
  Reduce by 9: expr -> '-' expr  . 


State 22:
14: expr -> '(' expr  . 
10: expr -> expr  . '+' expr 
11: expr -> expr  . '*' expr 
12: expr -> expr  . '-' expr 
13: expr -> expr  . '/' expr 
15: expr -> expr  . '(' 
16: expr -> expr  . ')' 
  0 (removed by precedence):   On '+' to state 14
  1 (removed by precedence):   On '*' to state 15
  2 (removed by precedence):   On '-' to state 16
  3 (removed by precedence):   On '/' to state 17
  4 (removed by precedence):   On '(' to state 18
  5 (removed by precedence):   On ')' to state 19
  Reduce by 14: expr -> '(' expr  . 


State 23:
10: expr -> expr '+' expr  . 
10: expr -> expr  . '+' expr 
11: expr -> expr  . '*' expr 
12: expr -> expr  . '-' expr 
13: expr -> expr  . '/' expr 
15: expr -> expr  . '(' 
16: expr -> expr  . ')' 
  0 (removed by precedence):   On '+' to state 14
  1:   On '*' to state 15
  2:   On '-' to state 16
  3:   On '/' to state 17
  4:   On '(' to state 18
  5:   On ')' to state 19
  Reduce by 10: expr -> expr '+' expr  . 


State 24:
11: expr -> expr '*' expr  . 
10: expr -> expr  . '+' expr 
11: expr -> expr  . '*' expr 
12: expr -> expr  . '-' expr 
13: expr -> expr  . '/' expr 
15: expr -> expr  . '(' 
16: expr -> expr  . ')' 
  0 (removed by precedence):   On '+' to state 14
  1:   On '*' to state 15
  2:   On '-' to state 16
  3:   On '/' to state 17
  4:   On '(' to state 18
  5:   On ')' to state 19
  Reduce by 11: expr -> expr '*' expr  . 


State 25:
12: expr -> expr '-' expr  . 
10: expr -> expr  . '+' expr 
11: expr -> expr  . '*' expr 
12: expr -> expr  . '-' expr 
13: expr -> expr  . '/' expr 
15: expr -> expr  . '(' 
16: expr -> expr  . ')' 
  0 (removed by precedence):   On '+' to state 14
  1 (removed by precedence):   On '*' to state 15
  2:   On '-' to state 16
  3 (removed by precedence):   On '/' to state 17
  4:   On '(' to state 18
  5:   On ')' to state 19
  Reduce by 12: expr -> expr '-' expr  . 


State 26:
13: expr -> expr '/' expr  . 
10: expr -> expr  . '+' expr 
11: expr -> expr  . '*' expr 
12: expr -> expr  . '-' expr 
13: expr -> expr  . '/' expr 
15: expr -> expr  . '(' 
16: expr -> expr  . ')' 
  0 (removed by precedence):   On '+' to state 14
  1 (removed by precedence):   On '*' to state 15
  2:   On '-' to state 16
  3 (removed by precedence):   On '/' to state 17
  4:   On '(' to state 18
  5:   On ')' to state 19
  Reduce by 13: expr -> expr '/' expr  . 



