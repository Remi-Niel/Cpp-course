%class-name Parser

%filenames parser
%parsefun-source parse.cc

%baseclass-preinclude rulevalue.h
%stype RuleValue

%scanner ../scanner/scanner.h

%token  NUMBER
        IDENT
        END

%right  '=' MULa DIVa MODa ADDa SUBa LSHIFTa RSHIFTa ANDa ORa XORa
%right  '~'
%left   '|'
%left   '^'
%left   '&'
%left   LSHIFT RSHIFT
%left   '+' '-'
%left   '*' '/' '%'
%right  uMinus

// %debug

%%

lines:
    lines line
|
    line
;


line:
    expr '\n'
    {
        display($1);
    }
|
    error '\n'    
    {
        prompt();
    }
|
    '\n'
    {
        prompt();
    }
|
    END '\n'
    {
        done();
    }
;

expr:
    NUMBER
    {
        $$ = value();
    }
|
    IDENT
    {
        $$ = variable();
    }
|
    '-' expr            %prec uMinus
    {
        $$ = negate($2);
    }
|
    '~' expr
    {
        $$ = bNOT($2);
    }
|
    expr '*' expr
    {
        $$ = mul($1, $3);
    }    
|
    expr '/' expr
    {
        $$ = div($1, $3);
    }    
|
    expr '%' expr
    {
        $$ = mod($1, $3);
    }    
|
    expr '+' expr
    {
        $$ = add($1, $3);
    }    
|
    expr '-' expr
    {
        $$ = sub($1, $3);

    }   
|
    expr LSHIFT expr
    {
        $$ = lshift($1, $3);

    }   
|
    expr RSHIFT expr
    {
        $$ = rshift($1, $3);

    } 
|
    expr '&' expr
    {
        $$ = bAND($1, $3);

    } 
|
    expr '^' expr
    {
        $$ = bXOR($1, $3);

    } 
|
    expr '|' expr
    {
        $$ = bOR($1, $3);

    }    
|
    '(' expr ')'
    {
        $$ = $2;
    }
|
    expr '=' expr
    {
        $$ = assign($1, $3);
    }
|
    expr MULa expr
    {
        assign($$, mul($1, $3));
    }
|
    expr DIVa expr
    {
        assign($$, div($1, $3));
    }
|
    expr MODa expr
    {
        assign($$, mod($1, $3));
    }
|
    expr ADDa expr
    {
        assign($$, add($1, $3));
    }
|
    expr SUBa expr
    {
        assign($$, sub($1, $3));
    }
|
    expr LSHIFTa expr
    {
        assign($$, lshift($1, $3));
    }
|
    expr RSHIFTa expr
    {
        assign($$, rshift($1, $3));
    }
|
    expr ANDa expr
    {
        assign($$, bAND($1, $3));
    }
|
    expr ORa expr
    {
        assign($$, bOR($1, $3));
    }
|
    expr XORa expr
    {
        assign($$, bXOR($1, $3));
    }
;

